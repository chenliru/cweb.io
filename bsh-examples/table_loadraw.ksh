#!/usr/bin/ksh93
#######################################################################################
#
#  Filename    : tableLoad.ksh
#
#  Author      : Liru Chen
#
#  Description	:	
#       Load data from Production DB to DEVELOPMENT DB using no log raw table
#		1. Tables are listed in <loadtables>, in sequence like:
#		      <child-table> 
#		      ....
#		      <base-table>
#		2. For raw TYPE table, INDEX is OK, but No referential(foreign key), 
#		   or unique constraints(primary key) is allowed
#
#		   ALTER TABLE <tablename> DROP CONSTRAINT <Reference name(rNum)>
#		   ALTER TABLE <tablename> DROP CONSTRAINT <Primary KeyName(uNum)> 
#
#		   notice: rNum and uNum are generated by informix
#
#		3. Re-Build reference, if Failure to satisfy referential constraint
#
#		   DELETE FROM <child-table> WHERE <foreign-keys> NOT IN
#		   (SELECT <foreign-keys> FROM <base-table>)
#
#		   or, you may need following when table is so huge or reference condition
#		   is complex,
#
#		   DELETE FROM <child-table>
#		   WHERE 0 = (SELECT COUNT(*) FROM <base-table>
#		   WHERE <child-table>.key1 = <base-table>.key1
#		   AND <child-table>.key2 = <base-table>.key2);
#
#		4. ENABLE ALL the index,constraint and trigger, and double check their status
#
#  Date : 2015-05-15
#                
########################################################################################
set -x
set -v

# tableName
loadDir=/usr/local/dbbkup
tableList=$loadDir/stage/loadtables

DATABASESVR=systestdb
DATABASE=ip_systest@systestdb

tableNames=($(cat $tableList))
integer summ=${#tableNames[@]}
#currentDate=$(date +%Y%m%d)
currentDate=20150517

#setup Database environment
. /login/lchen/ids115.env $DATABASESVR
cd $loadDir/sql

#Phase I: Collect CONSTRAINTS,INDEXES,TRIGGERS, and compose SQL 
sql () {
integer i=0


while (( i < summ ))
do 
	# clear SQL statement if exist
	cat /dev/null > DDL_${tableNames[$i]}.sql
	cat /dev/null > createindex_${tableNames[$i]}.sql
	cat /dev/null > dropindex_${tableNames[$i]}.sql
	cat /dev/null > createtrigger_${tableNames[$i]}.sql
	cat /dev/null > droptrigger_${tableNames[$i]}.sql
	cat /dev/null > createreference_${tableNames[$i]}.sql
	cat /dev/null > dropreference_${tableNames[$i]}.sql
	cat /dev/null > createprimarykey_${tableNames[$i]}.sql
	cat /dev/null > dropprimarykey_${tableNames[$i]}.sql

	dbschema -d $DATABASE -t ${tableNames[$i]} > DDL_${tableNames[$i]}.sql
	
	dbschema -d $DATABASE -t ${tableNames[$i]}|awk '{printf $0} /;/{print ""}' |
	egrep "create.index" > createindex_${tableNames[$i]}.sql	
	
	dbschema -d $DATABASE -t ${tableNames[$i]}|awk '{printf $0} /;/{print ""}' |
	egrep "create.index"|sed s/create/drop/|
	awk '{print $1" "$2" "$3}' > dropindex_${tableNames[$i]}.sql	

	dbschema -d $DATABASE -t ${tableNames[$i]}|awk '{printf $0} /;/{print ""}' |
	egrep "create.trigger" > createtrigger_${tableNames[$i]}.sql
	
	dbschema -d $DATABASE -t ${tableNames[$i]}|awk '{printf $0} /;/{print ""}' |
	egrep "create.trigger"|sed s/create/drop/|
	awk '{print $1" "$2" "$3}' > droptrigger_${tableNames[$i]}.sql

	dbschema -d $DATABASE -t ${tableNames[$i]}|awk '{printf $0} /;/{print ""}' |
	egrep "alter.table" > createreference_${tableNames[$i]}.sql
		
	primarykn=$(dbschema -d $DATABASE -t ${tableNames[$i]}|grep -i "primary key") 
	[[ $primarykn != "" ]] && echo "ALTER TABLE ${tableNames[$i]} ADD CONSTRAINT $primarykn;
	" >> createprimarykey_${tableNames[$i]}.sql
				
	echo "
	SELECT constrname FROM  sysconstraints
	WHERE tabid = (SELECT tabid FROM systables
	WHERE tabname = '${tableNames[$i]}');
	" | dbaccess $DATABASE |
	while read col1 cname
	do
		referencen=$(echo $cname | grep ^r)
		[[ $referencen != "" ]] && echo "ALTER TABLE ${tableNames[$i]} DROP CONSTRAINT $referencen 
		;" >> dropreference_${tableNames[$i]}.sql
	
		primaryn=$(echo $cname | grep ^u)
		[[ $primaryn != "" ]] && echo "ALTER TABLE ${tableNames[$i]} DROP CONSTRAINT $primaryn 
		;" >> dropprimarykey_${tableNames[$i]}.sql
	done
	
	i=i+1
done
}

# Phase II: TRUNCATE TABLE, unload data for rollback if needed
truncate () {
integer i=0
while (( i < summ ))
do 
	##uncomment unload if data in table is very important for rollback consideration
	#echo "
	#UNLOAD TO "$loadDir/sql/${tableNames[$i]}.$currentDate" \
	#SELECT * FROM ${tableNames[$i]}" |\
	#$INFORMIXDIR/bin/dbaccess $DATABASE

	#It's convenient in operations to disable constraint,index and trigger
	#where you intend to LOAD or TRUNCATE all the data in a table, 
	#or to consolidate the free space in a table
	echo "
	SET CONSTRAINTS,INDEXES,TRIGGERS FOR ${tableNames[$i]} DISABLED; " |
	$INFORMIXDIR/bin/dbaccess $DATABASE 

	#Truncating a table with delete trigger requires ALTER privilege.	
	echo "
	TRUNCATE ${tableNames[$i]}; " |
	$INFORMIXDIR/bin/dbaccess $DATABASE 
	
i=i+1
done
}

# Phase III: DROP PRIMARY INDEXES & CONSTRAINTS, ALTER TYPE(RAW)
raw () {
integer i=0

while (( i < summ ))
do 
	$INFORMIXDIR/bin/dbaccess $DATABASE dropprimarykey_${tableNames[$i]}.sql
	$INFORMIXDIR/bin/dbaccess $DATABASE dropreference_${tableNames[$i]}.sql

	echo "
		ALTER TABLE ${tableNames[$i]} TYPE(RAW); " |
		$INFORMIXDIR/bin/dbaccess $DATABASE
	
i=i+1
done
}

# Phase IV: LOAD TABLE
load () {
integer i=0
integer j=summ

while (( i < summ ))
do 
	j=j-1
	echo "
	LOAD FROM $loadDir/stage/${tableNames[$j]}.$currentDate 
	INSERT INTO ${tableNames[$j]}" | 
	$INFORMIXDIR/bin/dbaccess $DATABASE |
	grep -i error

	#[[ $? -ne 0 ]] && mv $loadDir/stage/${tableNames[$j]}.$currentDate $loadDir/done
	
i=i+1
done
}

# Phase V: ALTER TABLE TYPE(STANDARD), Re-Build INDEXES, CONSTRAINTS, TRIGGERS
standard () {
integer i=0
integer j=summ

while (( i < summ ))
do 
	j=j-1
	echo "
	ALTER TABLE ${tableNames[$j]} TYPE(STANDARD); " |
	$INFORMIXDIR/bin/dbaccess $DATABASE
	
	$INFORMIXDIR/bin/dbaccess $DATABASE createprimarykey_${tableNames[$j]}.sql
	$INFORMIXDIR/bin/dbaccess $DATABASE createreference_${tableNames[$j]}.sql

	echo "
	SET CONSTRAINTS,INDEXES,TRIGGERS FOR ${tableNames[$j]} ENABLED; " |
	$INFORMIXDIR/bin/dbaccess $DATABASE 
	#Double check INDEX,CONSTRAINT and TRIGGERS status are all ENABLED
	#in the sysobjstate system catalog table with status 'E'
	
i=i+1
done
}

#sql
#truncate
#raw
#load
standard

exit 0



